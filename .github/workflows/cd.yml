name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline", "SonarCloud Analysis"]
    types:
      - completed
    branches: [ dev ]

jobs:
  check-required-workflows:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - id: check
        name: Check if required workflows succeeded
        run: |
          CI_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ci.yml/runs?branch=dev&status=success&per_page=1" | \
            jq -r '.workflow_runs[0].conclusion')
          
          SONAR_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/sonar.yml/runs?branch=dev&status=success&per_page=1" | \
            jq -r '.workflow_runs[0].conclusion')
          
          if [[ "$CI_STATUS" == "success" && "$SONAR_STATUS" == "success" ]]; then
            echo "Both workflows succeeded"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Required workflows did not succeed. CI: $CI_STATUS, SonarCloud: $SONAR_STATUS"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: check-required-workflows
    if: ${{ needs.check-required-workflows.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: nodejs-app
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update task definition with environment variables
        run: |
          # Get all secret values
          DECODED_URI=$(echo -n '${{ secrets.MONGO_URI }}' | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))")
          PORT_VALUE="${{ secrets.PORT }}"
          JWT_SECRET_VALUE="${{ secrets.JWT_SECRET }}"
          JWT_EXPIRE_VALUE="${{ secrets.JWT_EXPIRE }}"
          
          # Use jq to update all environment variables in one pass
          jq --arg uri "$DECODED_URI" \
            --arg port "$PORT_VALUE" \
            --arg jwt_secret "$JWT_SECRET_VALUE" \
            --arg jwt_expire "$JWT_EXPIRE_VALUE" \
            '.containerDefinitions[0].environment |= map(
                if .name == "MONGO_URI" then .value = $uri
                elif .name == "PORT" then .value = $port
                elif .name == "JWT_SECRET" then .value = $jwt_secret
                elif .name == "JWT_EXPIRE" then .value = $jwt_expire
                else .
                end
              )' nodejs-app-task-definition.json > updated-task-def.json
          
          # Replace the original file
          mv updated-task-def.json nodejs-app-task-definition.json
          
          # Verify the replacements (excluding secrets from log output)
          echo "Task definition environment variables after replacement:"
          jq '.containerDefinitions[0].environment | map({name: .name})' nodejs-app-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nodejs-app-task-definition.json 
          container-name: nodejs-app
          image: ${{ steps.build-image.outputs.image }}    

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: nodejs-app-service
          cluster: NodeDevCluster
          wait-for-service-stability: true